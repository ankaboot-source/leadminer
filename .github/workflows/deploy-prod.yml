name: Leadminer
on:
  push:
    branches: [main]
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Leadminer
        uses: appleboy/ssh-action@master
        env:
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_SECRET: ${{ secrets.GOOGLE_SECRET }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          AZURE_SECRET: ${{ secrets.AZURE_SECRET }}
          SUPABASE_SERVICE_ROLE_KEY: ${{ secrets.SUPABASE_SERVICE_ROLE_KEY }}
          SUPABASE_ANON_KEY: ${{ secrets.SUPABASE_ANON_KEY}}
          PG_CONNECTION_STRING: ${{ secrets.PG_CONNECTION_STRING }}
          SUPABASE_DB_URL: ${{ secrets.SUPABASE_DB_URL }}
          LEADMINER_API_HASH_SECRET: ${{ secrets.LEADMINER_API_HASH_SECRET }}
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
          SAAS_SUPABASE_PG_CONNECTION_STRING: ${{ secrets.SAAS_SUPABASE_PG_CONNECTION_STRING }}
          SAAS_SUPABASE_SECRET_PROJECT_TOKEN: ${{ secrets.SAAS_SUPABASE_SECRET_PROJECT_TOKEN }}
          AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          REACHER_HEADER_SECRET: ${{ secrets.REACHER_HEADER_SECRET }}
          STRIPE_API_KEY: ${{ secrets.STRIPE_API_KEY }}
          STRIPE_WEBHOOK_SECRET: ${{ secrets.STRIPE_WEBHOOK_SECRET }}
          MAILERCHECK_API_KEY: ${{ secrets.MAILERCHECK_API_KEY }}
          LEADMINER_API_HOST: ${{ vars.LEADMINER_API_HOST }}
          LEADMINER_FRONTEND_HOST: ${{ vars.LEADMINER_FRONTEND_HOST }}
          SUPABASE_PROJECT_URL: ${{ vars.SUPABASE_PROJECT_URL }}
          AUTH_SERVER_URL: ${{ secrets.AUTH_SERVER_URL }}
          AUTH_SERVER_CALLBACK: ${{ secrets.AUTH_SERVER_CALLBACK }}

        with:
          host: ${{vars.SSH_HOST_LEADMINER}} # IP address of the server
          key: ${{secrets.SSH_KEY}} # Private or public key of the server
          username: ${{ secrets.SSH_USERNAME }} # User of the server
          envs: AUTH_SERVER_CALLBACK,AUTH_SERVER_URL,SUPABASE_PROJECT_URL,LEADMINER_FRONTEND_HOST,LEADMINER_API_HOST,GOOGLE_CLIENT_ID,GOOGLE_SECRET,AZURE_CLIENT_ID,AZURE_SECRET,SUPABASE_SERVICE_ROLE_KEY,PG_CONNECTION_STRING,LEADMINER_API_HASH_SECRET,REDIS_HOST,REDIS_PASSWORD,SAAS_SUPABASE_PG_CONNECTION_STRING,SAAS_SUPABASE_SECRET_PROJECT_TOKEN,SUPABASE_ANON_KEY,AZURE_TENANT_ID,REACHER_HEADER_SECRET,STRIPE_API_KEY,STRIPE_WEBHOOK_SECRET,MAILERCHECK_API_KEY
          script: |
            # Pull/Clone leadminer.io repos
            TARGET=prod
            REPO=leadminer_prod
            CONF_REPO="/home/leadminer-qa/leadminer.io"
            APP_REPO="/home/leadminer-qa/$REPO"

            # Check if the folders exists
            if [ -d "$CONF_REPO" ]; then
                echo "leadminer.io exists..."
            else
                echo "leadminer.io doesn't exist, Cloning Repo..."
                git clone git@github.com:ankaboot-source/leadminer.io.git
            fi

            if [ -d "$APP_REPO" ]; then
                echo "leadminer_prod exists..."
            else
                echo "leadminer_prod doesn't exist, Cloning Repo..."
                git clone git@github.com:ankaboot-source/leadminer.git "$REPO"
            fi

            # Setup leadminer-integration if exists
            if [ -f "$CONF_REPO/leadminer-integration.sh" ]; then
                chmod +x "$CONF_REPO/leadminer-integration.sh"
                "$CONF_REPO/leadminer-integration.sh" $APP_REPO git@github.com:ankaboot-source/leadminer-billing.git
            else
                echo "leadminer-integration.sh doesn't exist, so it won't run."
            fi

            # Setting up caddyfile
            cd leadminer.io
            sudo ansible-playbook -i ansible/caddy/leadminer/inventory/prod/hosts.ini ansible/caddy/leadminer/playbook.yml
            cd

            # leadminer deploy
            ( cd leadminer_$TARGET; docker compose down; git restore docker-compose.yml; git fetch; git reset --hard origin/main)
            ( cd leadminer.io; . .env.$TARGET ; git fetch; git reset --hard origin/main)

            export GOOGLE_SECRET
            export GOOGLE_CLIENT_ID
            export AZURE_SECRET
            export AZURE_CLIENT_ID
            export SUPABASE_SERVICE_ROLE_KEY
            export SUPABASE_ANON_KEY
            export PG_CONNECTION_STRING
            export LEADMINER_API_HASH_SECRET
            export REDIS_HOST
            export REDIS_PASSWORD
            export SAAS_SUPABASE_PG_CONNECTION_STRING
            export SAAS_SUPABASE_SECRET_PROJECT_TOKEN
            export REACHER_HEADER_SECRET
            export STRIPE_API_KEY
            export STRIPE_WEBHOOK_SECRET
            export MAILERCHECK_API_KEY
            export LEADMINER_API_HOST
            export LEADMINER_FRONTEND_HOST
            export SUPABASE_PROJECT_URL
            export AUTH_SERVER_URL
            export AUTH_SERVER_CALLBACK

            envsubst < leadminer.io/.env.$TARGET > leadminer_$TARGET/.env
            cp leadminer.io/docker-compose.yml leadminer_$TARGET

            cd leadminer_$TARGET
            # Remove old leadminer images
            docker images --format '{{.Repository}}:{{.Tag}}' | grep 'lead' | xargs -n 1 docker rmi
            docker compose --env-file .env up -d \
              --build \
              --force-recreate

            #Remove unused images
            docker image prune -a -f

