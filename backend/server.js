const express = require("express");
require("dotenv").config();
const app = express();
const http = require("http");

app.use((req, res, next) => {
  // Website you wish to allow to connect
  res.setHeader("Access-Control-Allow-Origin", "*");

  // Request methods you wish to allow
  res.setHeader(
    "Access-Control-Allow-Methods",
    "GET, POST, OPTIONS, PUT, PATCH, DELETE"
  );

  // Request headers you wish to allow
  res.setHeader(
    "Access-Control-Allow-Headers",
    "X-Requested-With,content-type"
  );

  // Set to true if you need the website to include cookies in the requests sent
  // to the API (e.g. in case you use sessions)
  res.setHeader("Access-Control-Allow-Credentials", true);

  // Pass to next layer of middleware
  next();
});

// parse requests of content-type - application/json
app.use(express.json());

// parse requests of content-type - application/x-www-form-urlencoded
app.use(express.urlencoded({ extended: true }));
const server = http.createServer(app);
const io = require("socket.io")(server, {
  pingTimeout: 290000,
  pingInterval: 45000,
  cors: {
    origin: "*",
    methods: ["GET", "POST", "OPTIONS", "PUT", "PATCH", "DELETE"],
  },
});
const db = require("./app/models");

db.sequelize.sync();

// simple route when calling api.leadminer.io
app.get("/", (req, res) => {
  res.json({ message: "Welcome to leadminer application." });
});

const sockets = {};
io.on("connection", (socket) => {
  socket.on("connectInit", (SessionId) => {
    // The socket ID is stored along with the unique ID generated by the client
    sockets[SessionId] = socket.id;
    // The sockets object is stored in Express so it can be grabbed in a route
    app.set("sockets", sockets);
  });
  socket.broadcast.emit("user-connected", socket.id);
});

// The io instance is set in Express so it can be grabbed in a route
app.set("io", io);
require("./app/routes/imap.routes")(app);

// set port, listen for requests
const PORT = process.env.PORT || 8081;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});

module.exports = server;
