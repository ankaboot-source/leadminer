// const express = require("express");
// // const cors = require("cors");
// // const app = express();
// // const http = require("http");
// // const server = http.createServer(app);
// // const { Server } = require("socket.io");
// // const io = new Server(server);
// // app.use(function (req, res, next) {
// //   // Website you wish to allow to connect
// //   res.setHeader("Access-Control-Allow-Origin", "*");

// //   // Request methods you wish to allow
// //   res.setHeader(
// //     "Access-Control-Allow-Methods",
// //     "GET, POST, OPTIONS, PUT, PATCH, DELETE"
// //   );

// //   // Request headers you wish to allow
// //   res.setHeader(
// //     "Access-Control-Allow-Headers",
// //     "X-Requested-With,content-type"
// //   );

// //   // Set to true if you need the website to include cookies in the requests sent
// //   // to the API (e.g. in case you use sessions)
// //   res.setHeader("Access-Control-Allow-Credentials", true);

// //   // Pass to next layer of middleware
// //   next();
// // });

// // // parse requests of content-type - application/json

// // io.on("connection", (socket) => {
// //   console.log(`Client connected: ${socket.id}`);
// // });

// // // The io instance is set in Express so it can be grabbed in a route
// // app.set("socket.io", io);
// // require("./app/routes/imap.routes")(app);

// // // set port, listen for requests
// // const PORT = process.env.PORT || 8081;
// // http.listen(PORT, () => {
// //   console.log(`Server is running on port ${PORT}.`);
// // });

// var app = require("express")();

// app.use(function (req, res, next) {
//   res.setHeader("Access-Control-Allow-Origin", "*");
//   res.setHeader(
//     "Access-Control-Allow-Methods",
//     "GET, POST, OPTIONS, PUT, PATCH, DELETE"
//   );
//   res.setHeader(
//     "Access-Control-Allow-Headers",
//     "X-Requested-With,content-type"
//   );
//   res.setHeader("Access-Control-Allow-Credentials", true);

//   next();
// });
// app.use(express.json()); /* bodyParser.json() is deprecated */

// // parse requests of content-type - application/x-www-form-urlencoded
// app.use(
//   express.urlencoded({ extended: true })
// ); /* bodyParser.urlencoded() is deprecated */

// const db = require("./app/models");
// db.sequelize.sync();
// // // drop the table if it already exists
// // db.sequelize.sync({ force: true }).then(() => {
// //   console.log("Drop and re-sync db.");
// // });

// // simple route
// app.get("/", (req, res) => {
//   res.json({ message: "Welcome to leadminer application." });
// });
// var http = require("http").Server(app);
// var io = require("socket.io")(http, {
//   cors: {
//     origin: "http://localhost:8082",
//     methods: ["GET", "POST", "OPTIONS", "PUT", "PATCH", "DELETE"],
//   },
// });
// const sockets = {};
// io.on("connection", (socket) => {
//   console.log(`A user connected with socket id ${socket.id}`);
//   socket.on("connectInit", (sessionId) => {
//     // The socket ID is stored along with the unique ID generated by the client
//     sockets[sessionId] = socket.id;
//     // The sockets object is stored in Express so it can be grabbed in a route
//     app.set("sockets", sockets);
//     console.log(sockets);
//   });
//   socket.broadcast.emit("user-connected", socket.id);

//   socket.on("disconnect", () => {
//     socket.broadcast.emit("user-disconnected", socket.id);
//   });

//   socket.on("nudge-client", (data) => {
//     socket.broadcast.to(data.to).emit("client-nudged", data);
//   });
// });

// // The io instance is set in Express so it can be grabbed in a route
// app.set("io", io);
// const PORT = process.env.PORT || 8081;

// http.listen(PORT, () => {
//   console.log(`Listening on ${PORT}`);
// });
const express = require("express");
const cors = require("cors");
const app = express();
const http = require("http");
const server = http.createServer(app);

// // const http = require("http");
// // const server = http.createServer(app);
// // const { Server } = require("socket.io");
// // const io = new Server(server);
app.use(function (req, res, next) {
  // Website you wish to allow to connect
  res.setHeader("Access-Control-Allow-Origin", "*");

  // Request methods you wish to allow
  res.setHeader(
    "Access-Control-Allow-Methods",
    "GET, POST, OPTIONS, PUT, PATCH, DELETE"
  );

  // Request headers you wish to allow
  res.setHeader(
    "Access-Control-Allow-Headers",
    "X-Requested-With,content-type"
  );

  // Set to true if you need the website to include cookies in the requests sent
  // to the API (e.g. in case you use sessions)
  res.setHeader("Access-Control-Allow-Credentials", true);

  // Pass to next layer of middleware
  next();
});

// parse requests of content-type - application/json
app.use(express.json()); /* bodyParser.json() is deprecated */

// parse requests of content-type - application/x-www-form-urlencoded
app.use(
  express.urlencoded({ extended: true })
); /* bodyParser.urlencoded() is deprecated */

const db = require("./app/models");
db.sequelize.sync();
// // drop the table if it already exists
// db.sequelize.sync({ force: true }).then(() => {
//   console.log("Drop and re-sync db.");
// });

// simple route
app.get("/", (req, res) => {
  res.json({ message: "Welcome to leadminer application." });
});
var io = require("socket.io")(server, {
  cors: {
    origin: "http://46.101.205.87:8081",
    methods: ["GET", "POST", "OPTIONS", "PUT", "PATCH", "DELETE"],
  },
});
const sockets = {};
io.on("connection", (socket) => {
  console.log(`A user connected with socket id ${socket.id}`);
  socket.on("connectInit", (SessionId) => {
    // The socket ID is stored along with the unique ID generated by the client
    sockets[SessionId] = socket.id;
    // The sockets object is stored in Express so it can be grabbed in a route
    app.set("sockets", sockets);
    console.log(sockets);
  });
  socket.broadcast.emit("user-connected", socket.id);

  socket.on("disconnect", () => {
    socket.broadcast.emit("user-disconnected", socket.id);
  });

  socket.on("nudge-client", (data) => {
    socket.broadcast.to(data.to).emit("client-nudged", data);
  });
});

// The io instance is set in Express so it can be grabbed in a route
app.set("io", io);
require("./app/routes/imap.routes")(app);

// set port, listen for requests
const PORT = process.env.PORT || 8081;
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}.`);
});
